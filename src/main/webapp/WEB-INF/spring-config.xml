<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:tx="http://www.springframework.org/schema/tx"
    xmlns:mvc="http://www.springframework.org/schema/mvc"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/tx
        https://www.springframework.org/schema/tx/spring-tx.xsd
		http://www.springframework.org/schema/mvc
        https://www.springframework.org/schema/mvc/spring-mvc.xsd">

        
        <!-- Enabling support for JSON parsing, validation and other
	features of Spring MVC -->
	<mvc:annotation-driven />
        

        
        
	<!-- Loading annotated beans -->
	<context:component-scan base-package="com.lti.controller, com.lti.dao, com.lti.service" />

	<bean id="dataSource" class="org.apache.commons.dbcp2.BasicDataSource"
		destroy-method="close">
		<property name="driverClassName" value="oracle.jdbc.driver.OracleDriver" />
		<property name="url" value="jdbc:oracle:thin:@localhost:1521:XE" />
		<property name="username" value="hr" />
		<property name="password" value="hr" />
	</bean>
	<!--  EntityManagerFactory configuration Required when using an ORM in our project.
	This bean entry will automatically create Entity ManagerFactory and EntityManager object 
	for us. Also no need of separate Meta-INF/persistance.xml file
	since all the settings can be done here itself within the bean tag -->
	<bean id="myEmf"
		class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="packagesToScan" value="com.lti.entity" />
		<property name="jpaVendorAdapter">
			<bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter" />
		</property>
		<property name="jpaProperties">
			<props>
				<!-- <prop key="hibernate.hbm2ddl.auto">update</prop> -->
				<prop key="hibernate.show_sql">true</prop>
			</props>
		</property>
	</bean>
	
	<!-- This bean will manage the transactions for us,
	so no need to manually write the code to begin/commit/rollback 
	we just need to use @Transactional annotion -->
	<bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
    <property name="entityManagerFactory" ref="myEmf" />
</bean>
<bean id="mailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl">
        <property name="host" value="smtp.office365.com"/>
        <property name="port" value="587" />
        <property name="username" value="anil.ankad@lntinfotech.com"/>
        <property name="password" value="ara@2014831535"/>
        <property name="javaMailProperties">
            <props>
                <prop key="mail.transport.protocol">smtp</prop>
                <prop key="mail.smtp.auth">true</prop>
                <prop key="mail.smtp.starttls.enable">true</prop>
                <prop key="mail.debug">true</prop>
                <prop key="mail.smtp.connecttimeout">50000</prop>
                <prop key="mail.smtp.timeout">30000</prop>
                <prop key="mail.smtp.writetimeout">50000</prop>
            </props>
        </property>
    </bean>

    <bean id="preConfiguredMessage" class="org.springframework.mail.SimpleMailMessage">
        <property name="from" value="anil.ankad@lntinfotech.com"></property>
    </bean>

<tx:annotation-driven />
</beans>